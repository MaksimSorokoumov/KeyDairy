
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import calendar
import datetime
from pathlib import Path
from typing import Optional
from encryption_utils import EncryptionManager

class LogViewer:
    """GUI –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –∫–µ–π–ª–æ–≥–µ—Ä–∞"""

    def __init__(self, encryption_manager: EncryptionManager, log_dir: Path):
        self.encryption_manager = encryption_manager
        self.log_dir = log_dir
        self.selected_date = datetime.date.today()
        self.current_month = datetime.date.today().replace(day=1)

        self.root = tk.Tk()
        self.root.title("KeyDairy - –ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–æ–≤")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)

        # –°—Ç–∏–ª—å
        self.style = ttk.Style()
        self.style.theme_use('clam')

        self.setup_ui()
        self.load_log_for_date(self.selected_date)

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_container)
        header_frame.pack(fill=tk.X, pady=(0, 10))

        title_label = ttk.Label(
            header_frame, 
            text="üîê KeyDairy - –ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
            font=('Arial', 16, 'bold')
        )
        title_label.pack()

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (–∫–∞–ª–µ–Ω–¥–∞—Ä—å + –ª–æ–≥–∏)
        content_frame = ttk.Frame(main_container)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        left_panel = ttk.LabelFrame(content_frame, text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º", padding=10)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))

        self.setup_calendar_panel(left_panel)
        self.setup_navigation_panel(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤
        right_panel = ttk.LabelFrame(content_frame, text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∂—É—Ä–Ω–∞–ª–∞", padding=10)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.setup_log_panel(right_panel)

        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.setup_status_bar(main_container)

    def setup_calendar_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        month_nav_frame = ttk.Frame(parent)
        month_nav_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Button(month_nav_frame, text="‚Üê", width=3,
                  command=self.prev_month).pack(side=tk.LEFT)

        self.month_label = ttk.Label(month_nav_frame, font=('Arial', 12, 'bold'))
        self.month_label.pack(side=tk.LEFT, expand=True)

        ttk.Button(month_nav_frame, text="‚Üí", width=3,
                  command=self.next_month).pack(side=tk.RIGHT)

        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        self.calendar_frame = ttk.Frame(parent)
        self.calendar_frame.pack(fill=tk.BOTH, expand=True)

        self.update_calendar()

    def setup_navigation_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º"""
        nav_frame = ttk.LabelFrame(parent, text="–ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è")
        nav_frame.pack(fill=tk.X, pady=(10, 0))

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        button_frame = ttk.Frame(nav_frame)
        button_frame.pack(fill=tk.X, padx=5, pady=5)

        ttk.Button(button_frame, text="‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å",
                  command=self.prev_day).pack(fill=tk.X, pady=2)

        ttk.Button(button_frame, text="–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚Üí",
                  command=self.next_day).pack(fill=tk.X, pady=2)

        ttk.Button(button_frame, text="üìÖ –°–µ–≥–æ–¥–Ω—è",
                  command=self.go_to_today).pack(fill=tk.X, pady=2)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        date_info_frame = ttk.Frame(nav_frame)
        date_info_frame.pack(fill=tk.X, padx=5, pady=(10, 5))

        ttk.Label(date_info_frame, text="–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:").pack()
        self.selected_date_label = ttk.Label(date_info_frame, 
                                           font=('Arial', 10, 'bold'),
                                           foreground='blue')
        self.selected_date_label.pack()

    def setup_log_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        info_frame = ttk.Frame(parent)
        info_frame.pack(fill=tk.X, pady=(0, 10))

        self.file_info_label = ttk.Label(info_frame, text="", font=('Arial', 9))
        self.file_info_label.pack(anchor=tk.W)

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(
            parent, 
            wrap=tk.WORD,
            font=('Consolas', 10),
            state=tk.DISABLED,
            bg='#f8f9fa',
            fg='#212529'
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(parent)
        buttons_frame.pack(fill=tk.X, pady=(10, 0))

        ttk.Button(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                  command=self.refresh_current_log).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(buttons_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë",
                  command=self.copy_all_text).pack(side=tk.LEFT, padx=5)

        ttk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                  command=self.clear_display).pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ (EN -> RU) –ø–æ –º–µ—Ç–∫–µ layout –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        ttk.Button(buttons_frame, text="üîÅ –ö–æ–Ω–≤–µ—Ä—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏",
                  command=self.auto_convert_layout).pack(side=tk.LEFT, padx=5)

    def setup_status_bar(self, parent):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä"""
        self.status_frame = ttk.Frame(parent)
        self.status_frame.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

        # –°–æ–∑–¥–∞–µ–º —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä
        separator = ttk.Separator(self.status_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=(0, 5))

        self.status_label = ttk.Label(self.status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.pack(side=tk.LEFT)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        self.records_label = ttk.Label(self.status_frame, text="")
        self.records_label.pack(side=tk.RIGHT)

    def update_calendar(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        for widget in self.calendar_frame.winfo_children():
            widget.destroy()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
        month_name = calendar.month_name[self.current_month.month]
        year = self.current_month.year
        self.month_label.config(text=f"{month_name} {year}")

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        days_frame = ttk.Frame(self.calendar_frame)
        # –†–∞–∑–º–µ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–µ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        days_frame.grid(row=0, column=0, columnspan=7, sticky='ew', pady=(0, 5))

        for i, day_name in enumerate(['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']):
            label = ttk.Label(days_frame, text=day_name, 
                             font=('Arial', 8, 'bold'), width=4)
            label.grid(row=0, column=i, padx=1, pady=1)

        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        cal = calendar.monthcalendar(self.current_month.year, self.current_month.month)

        for week_num, week in enumerate(cal):
            for day_num, day in enumerate(week):
                if day == 0:
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                    widget = ttk.Label(self.calendar_frame, text="", width=4)
                else:
                    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                    day_date = datetime.date(self.current_month.year, self.current_month.month, day)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–≥ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                    has_log = self.has_log_for_date(day_date)

                    widget = ttk.Button(
                        self.calendar_frame,
                        text=str(day),
                        width=4,
                        command=lambda d=day_date: self.select_date(d)
                    )

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
                    if day_date == self.selected_date:
                        widget.configure(style='Selected.TButton')
                    elif day_date == datetime.date.today():
                        widget.configure(style='Today.TButton')
                    elif has_log:
                        # –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–Ω–µ–π —Å –ª–æ–≥–∞–º–∏, –µ—Å–ª–∏ —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–∏–º
                        try:
                            widget.configure(style='HasLog.TButton')
                        except:
                            pass

                widget.grid(row=week_num + 1, column=day_num, padx=1, pady=1)

        self.configure_calendar_styles()

    def configure_calendar_styles(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        try:
            self.style.configure('Selected.TButton', background='#0066cc', foreground='white')
            self.style.configure('Today.TButton', background='#28a745', foreground='white')
            self.style.configure('HasLog.TButton', background='#ffc107', foreground='black')
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∏–ª–µ–π

    def select_date(self, date):
        """–í—ã–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥"""
        self.selected_date = date
        self.update_calendar()
        self.load_log_for_date(date)
        self.update_selected_date_display()

    def load_log_for_date(self, date):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        log_file = self.get_log_file_path(date)

        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)

        if log_file and log_file.exists():
            try:
                decrypted_content = self.encryption_manager.decrypt_file(log_file)
                self.log_text.insert(1.0, decrypted_content)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
                lines = decrypted_content.split('\n')
                record_count = len([line for line in lines if line.strip().startswith('[')])

                self.file_info_label.config(
                    text=f"–§–∞–π–ª: {log_file.name} | –†–∞–∑–º–µ—Ä: {log_file.stat().st_size} –±–∞–π—Ç"
                )
                self.records_label.config(text=f"–ó–∞–ø–∏—Å–µ–π: {record_count}")
                self.status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω –∂—É—Ä–Ω–∞–ª –∑–∞ {date.strftime('%d.%m.%Y')}")

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}"
                self.log_text.insert(1.0, error_msg)
                self.status_label.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                self.records_label.config(text="")
        else:
            no_data_msg = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date.strftime('%d.%m.%Y')}\n\n"
            no_data_msg += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            no_data_msg += "‚Ä¢ –ö–µ–π–ª–æ–≥–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
            no_data_msg += "‚Ä¢ –ù–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n"
            no_data_msg += "‚Ä¢ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω"

            self.log_text.insert(1.0, no_data_msg)
            self.file_info_label.config(text="–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            self.records_label.config(text="–ó–∞–ø–∏—Å–µ–π: 0")
            self.status_label.config(text=f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date.strftime('%d.%m.%Y')}")

        self.log_text.config(state=tk.DISABLED)

    def get_log_file_path(self, date) -> Optional[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        year_month_dir = self.log_dir / str(date.year) / calendar.month_name[date.month]
        log_file = year_month_dir / f"{date.day}.enc"
        return log_file if year_month_dir.exists() else None

    def has_log_for_date(self, date) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        log_file = self.get_log_file_path(date)
        return log_file and log_file.exists()

    def prev_day(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é"""
        self.selected_date -= datetime.timedelta(days=1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—Ü –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.selected_date.month != self.current_month.month or \
           self.selected_date.year != self.current_month.year:
            self.current_month = self.selected_date.replace(day=1)
            self.update_calendar()
        else:
            self.update_calendar()

        self.load_log_for_date(self.selected_date)
        self.update_selected_date_display()

    def next_day(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é"""
        self.selected_date += datetime.timedelta(days=1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—Ü –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.selected_date.month != self.current_month.month or \
           self.selected_date.year != self.current_month.year:
            self.current_month = self.selected_date.replace(day=1)
            self.update_calendar()
        else:
            self.update_calendar()

        self.load_log_for_date(self.selected_date)
        self.update_selected_date_display()

    def go_to_today(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ"""
        today = datetime.date.today()
        self.select_date(today)
        self.current_month = today.replace(day=1)
        self.update_calendar()

    def prev_month(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É"""
        if self.current_month.month == 1:
            self.current_month = self.current_month.replace(year=self.current_month.year-1, month=12)
        else:
            self.current_month = self.current_month.replace(month=self.current_month.month-1)
        self.update_calendar()

    def next_month(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É"""
        if self.current_month.month == 12:
            self.current_month = self.current_month.replace(year=self.current_month.year+1, month=1)
        else:
            self.current_month = self.current_month.replace(month=self.current_month.month+1)
        self.update_calendar()

    def update_selected_date_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        formatted_date = self.selected_date.strftime('%d.%m.%Y (%A)')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        day_names = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        for eng, rus in day_names.items():
            formatted_date = formatted_date.replace(eng, rus)

        self.selected_date_label.config(text=formatted_date)

    def refresh_current_log(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ª–æ–≥"""
        self.load_log_for_date(self.selected_date)

    def copy_all_text(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            content = self.log_text.get(1.0, tk.END)
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            self.status_label.config(text="–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {e}")

    def translit_en_to_ru(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–±—Ä–∞–Ω–Ω—ã–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ, –≤ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –ø–æ —Ä–∞—Å–∫–ª–∞–¥–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        mapping = {
            'q':'–π','w':'—Ü','e':'—É','r':'–∫','t':'–µ','y':'–Ω','u':'–≥','i':'—à','o':'—â','p':'–∑','[':'—Ö',']':'—ä',
            'a':'—Ñ','s':'—ã','d':'–≤','f':'–∞','g':'–ø','h':'—Ä','j':'–æ','k':'–ª','l':'–¥',';':'–∂',"'":'—ç',
            'z':'—è','x':'—á','c':'—Å','v':'–º','b':'–∏','n':'—Ç','m':'—å',',':'–±','.':'—é','/':'.'
        }
        result_chars = []
        for ch in text:
            lower = ch.lower()
            if lower in mapping:
                mapped = mapping[lower]
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
                if ch.isupper():
                    mapped = mapped.upper()
                result_chars.append(mapped)
            else:
                result_chars.append(ch)
        return ''.join(result_chars)

    def auto_convert_layout(self):
        """–ò—â–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –º–µ—Ç–∫–æ–π layout:en –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏ –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É."""
        try:
            self.log_text.config(state=tk.NORMAL)
            full = self.log_text.get(1.0, tk.END)

            lines = full.splitlines(keepends=True)
            i = 0
            while i < len(lines):
                line = lines[i]
                if line.lstrip().startswith('## [') and 'layout:en' in line:
                    # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ '## [' –∏–ª–∏ –∫–æ–Ω—Ü–∞
                    j = i + 1
                    while j < len(lines) and not lines[j].lstrip().startswith('## ['):
                        lines[j] = self.translit_en_to_ru(lines[j])
                        j += 1
                    i = j
                else:
                    i += 1

            new_text = ''.join(lines)
            self.log_text.delete(1.0, tk.END)
            self.log_text.insert(1.0, new_text)
            self.log_text.config(state=tk.DISABLED)
            self.status_label.config(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É: {e}")

    def clear_display(self):
        """–û—á–∏—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.status_label.config(text="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI"""
        self.update_selected_date_display()
        self.root.mainloop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GUI –æ—Ç–¥–µ–ª—å–Ω–æ
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import tempfile

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    temp_dir = Path(tempfile.mkdtemp())
    log_dir = temp_dir / "logs"
    config_file = temp_dir / "config.json"

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    test_password = "test123"
    encryption_manager = EncryptionManager(test_password)
    encryption_manager.save_config(config_file)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    create_test_logs(encryption_manager, log_dir)

    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
    viewer = LogViewer(encryption_manager, log_dir)
    viewer.run()

    # –û—á–∏—Å—Ç–∫–∞
    import shutil
    shutil.rmtree(temp_dir)

def create_test_logs(encryption_manager, log_dir):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    test_dates = [
        (datetime.date(2024, 8, 15), "# –ñ—É—Ä–Ω–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞ 2024-08-15\n\n## [09:15:23] Chrome - google.com\n\npython keylogger tutorial\n\n## [10:30:25] VSCode - main.py\n\ndef encrypt_data(text, password):\n    pass\n\n"),
        (datetime.date(2024, 8, 16), "# –ñ—É—Ä–Ω–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞ 2024-08-16\n\n## [08:30:15] Chrome - youtube.com\n\nwatching Python tutorials\n\n## [14:30:12] Notepad - shopping.txt\n\nmilk, bread, eggs, cheese\n\n"),
        (datetime.date.today(), f"# –ñ—É—Ä–Ω–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞ {datetime.date.today()}\n\n## [09:00:12] –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–æ–≤ KeyDairy\n\n")
    ]

    for test_date, content in test_dates:
        year_month_dir = log_dir / str(test_date.year) / calendar.month_name[test_date.month]
        year_month_dir.mkdir(parents=True, exist_ok=True)

        log_file = year_month_dir / f"{test_date.day}.enc"
        encryption_manager.encrypt_to_file(content, log_file)

if __name__ == "__main__":
    main()
